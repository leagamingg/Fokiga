//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/InputActions/InputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAsset"",
    ""maps"": [
        {
            ""name"": ""CharacterControllerMap"",
            ""id"": ""d2bd5029-face-46e5-beca-07dfc15daefc"",
            ""actions"": [
                {
                    ""name"": ""MoveForward"",
                    ""type"": ""Button"",
                    ""id"": ""5a6f2eda-211c-4d2f-9a14-5b5bd878677d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveBack"",
                    ""type"": ""Button"",
                    ""id"": ""f4fa3fc6-eee2-49c1-ada8-147b9f2c0823"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""452db21d-5813-437d-8aef-f80e835d67f3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""293cb4d4-8e14-4d83-8ad2-7714540aeaa6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""414c3100-8bb5-4fe8-b82a-7a5cf3fbed9c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""fce1c572-67fc-4576-a7cf-495e9fac588b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slip"",
                    ""type"": ""Button"",
                    ""id"": ""c58cf5c2-1596-4179-80fa-7bbefb12521a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""057ddc37-1a05-4876-9aa4-f6d5ae1f0e2a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2001acdb-689c-48e4-b482-5773a2c985dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79bb47ad-52e0-49c4-9067-0e208189ec80"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""247245d0-7309-4149-9ab2-5840e5046678"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2af4507-5915-4c3f-8789-831a8e619cfb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c930534-f809-4c6f-bcac-23232301b85f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b5d9277-d7d4-4767-8a95-ef8315725014"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterControllerMap
        m_CharacterControllerMap = asset.FindActionMap("CharacterControllerMap", throwIfNotFound: true);
        m_CharacterControllerMap_MoveForward = m_CharacterControllerMap.FindAction("MoveForward", throwIfNotFound: true);
        m_CharacterControllerMap_MoveBack = m_CharacterControllerMap.FindAction("MoveBack", throwIfNotFound: true);
        m_CharacterControllerMap_MoveLeft = m_CharacterControllerMap.FindAction("MoveLeft", throwIfNotFound: true);
        m_CharacterControllerMap_MoveRight = m_CharacterControllerMap.FindAction("MoveRight", throwIfNotFound: true);
        m_CharacterControllerMap_Jump = m_CharacterControllerMap.FindAction("Jump", throwIfNotFound: true);
        m_CharacterControllerMap_Run = m_CharacterControllerMap.FindAction("Run", throwIfNotFound: true);
        m_CharacterControllerMap_Slip = m_CharacterControllerMap.FindAction("Slip", throwIfNotFound: true);
    }

    ~@InputAsset()
    {
        UnityEngine.Debug.Assert(!m_CharacterControllerMap.enabled, "This will cause a leak and performance issues, InputAsset.CharacterControllerMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterControllerMap
    private readonly InputActionMap m_CharacterControllerMap;
    private List<ICharacterControllerMapActions> m_CharacterControllerMapActionsCallbackInterfaces = new List<ICharacterControllerMapActions>();
    private readonly InputAction m_CharacterControllerMap_MoveForward;
    private readonly InputAction m_CharacterControllerMap_MoveBack;
    private readonly InputAction m_CharacterControllerMap_MoveLeft;
    private readonly InputAction m_CharacterControllerMap_MoveRight;
    private readonly InputAction m_CharacterControllerMap_Jump;
    private readonly InputAction m_CharacterControllerMap_Run;
    private readonly InputAction m_CharacterControllerMap_Slip;
    public struct CharacterControllerMapActions
    {
        private @InputAsset m_Wrapper;
        public CharacterControllerMapActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveForward => m_Wrapper.m_CharacterControllerMap_MoveForward;
        public InputAction @MoveBack => m_Wrapper.m_CharacterControllerMap_MoveBack;
        public InputAction @MoveLeft => m_Wrapper.m_CharacterControllerMap_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_CharacterControllerMap_MoveRight;
        public InputAction @Jump => m_Wrapper.m_CharacterControllerMap_Jump;
        public InputAction @Run => m_Wrapper.m_CharacterControllerMap_Run;
        public InputAction @Slip => m_Wrapper.m_CharacterControllerMap_Slip;
        public InputActionMap Get() { return m_Wrapper.m_CharacterControllerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControllerMapActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControllerMapActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControllerMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControllerMapActionsCallbackInterfaces.Add(instance);
            @MoveForward.started += instance.OnMoveForward;
            @MoveForward.performed += instance.OnMoveForward;
            @MoveForward.canceled += instance.OnMoveForward;
            @MoveBack.started += instance.OnMoveBack;
            @MoveBack.performed += instance.OnMoveBack;
            @MoveBack.canceled += instance.OnMoveBack;
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            @MoveRight.started += instance.OnMoveRight;
            @MoveRight.performed += instance.OnMoveRight;
            @MoveRight.canceled += instance.OnMoveRight;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @Slip.started += instance.OnSlip;
            @Slip.performed += instance.OnSlip;
            @Slip.canceled += instance.OnSlip;
        }

        private void UnregisterCallbacks(ICharacterControllerMapActions instance)
        {
            @MoveForward.started -= instance.OnMoveForward;
            @MoveForward.performed -= instance.OnMoveForward;
            @MoveForward.canceled -= instance.OnMoveForward;
            @MoveBack.started -= instance.OnMoveBack;
            @MoveBack.performed -= instance.OnMoveBack;
            @MoveBack.canceled -= instance.OnMoveBack;
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            @MoveRight.started -= instance.OnMoveRight;
            @MoveRight.performed -= instance.OnMoveRight;
            @MoveRight.canceled -= instance.OnMoveRight;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @Slip.started -= instance.OnSlip;
            @Slip.performed -= instance.OnSlip;
            @Slip.canceled -= instance.OnSlip;
        }

        public void RemoveCallbacks(ICharacterControllerMapActions instance)
        {
            if (m_Wrapper.m_CharacterControllerMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControllerMapActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControllerMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControllerMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControllerMapActions @CharacterControllerMap => new CharacterControllerMapActions(this);
    public interface ICharacterControllerMapActions
    {
        void OnMoveForward(InputAction.CallbackContext context);
        void OnMoveBack(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnSlip(InputAction.CallbackContext context);
    }
}
